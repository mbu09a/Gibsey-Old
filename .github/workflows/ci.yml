name: CI

on: [push, pull_request]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: gibsey_test
  DATABASE_URL: postgresql://postgres:postgres@localhost:5433/gibsey_test

defaults:
  run:
    shell: bash

jobs:
  # Pre-commit checks
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      
      - name: Run pre-commit
        run: pre-commit run --all-files

  # Backend Linting and Testing
  backend:
    needs: pre-commit
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f "requirements-test.txt" ]; then
            pip install -r requirements-test.txt
          fi
          pip install ruff==0.4.1 black isort pytest supabase openai pytest-mock
      
      - name: Lint with ruff
        run: ruff check --output-format=github .
      
      - name: Format with black
        run: black --check .
      
      - name: Sort imports with isort
        run: isort --check-only .
      
      - name: Run tests
        run: pytest -v tests/

  # Frontend Linting and Type Checking
  frontend:
    needs: pre-commit
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js with pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        id: pnpm-install
        with:
          version: 8
          run_install: false
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "PNPM_HOME=$(pnpm store path --silent)" >> $GITHUB_ENV
          echo "${{ github.workspace }}/node_modules/.bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          pnpm --version
          which pnpm
          echo "$PATH"
        
      - name: Verify pnpm-lock.yaml
        run: |
          if [ ! -f "pnpm-lock.yaml" ]; then
            echo "Error: pnpm-lock.yaml not found"
            exit 1
          else
            echo "pnpm-lock.yaml found"
          fi
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
          
      - name: Lint with ESLint
        run: pnpm exec eslint src --max-warnings=0
      
      - name: Type check with TypeScript
        run: pnpm exec tsc --noEmit
        
      - name: Build application
        run: pnpm build